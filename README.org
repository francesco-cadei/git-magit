#+BEGIN_QUOTE
first example is for *git* (command-line), second is for *magit*
#+END_QUOTE

* intro

- git :: DVCS (Distributed Version Control System)

advantages of a VCS:
- collaboration
- storing/restoring versions
- understanding changes
- backup

* basics

** init

- create =.git/=
- create HEAD file referencing master (not explicit commit)

#+BEGIN_EXAMPLE
git init [<dir>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-init
#+END_EXAMPLE

- if not specified, current =<dir>= is considered

** status

displays paths in the working that:
- untracked ::  not in index file (not ignored by .gitignore)
- unstaged :: working tree state different from index virtual working tree state
- staged :: index virtual working tree state different from HEAD referenced branch snapshot

#+BEGIN_EXAMPLE
git status
#+END_EXAMPLE

#+BEGIN_EXAMPLE
C-x g
#+END_EXAMPLE

- index is a binary file with file tracked and their hash to the objects, so it implement a virtual working tree state

** track/stage

update index to set paths:
- untracked -> tracked
- unstaged -> staged

#+BEGIN_EXAMPLE
git add <path>..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
s: single
S: all

C-space: select hunk portion
#+END_EXAMPLE

** untrack/unstaged

update index to set paths:
- tracked -> untracked
- staged -> unstaged

#+BEGIN_EXAMPLE
git reset HEAD <path>..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
u: single
U: all
#+END_EXAMPLE

** commit

snapshot of the index changes and HEAD branch update

#+BEGIN_EXAMPLE
git commit
git commit --amend
#+END_EXAMPLE

#+BEGIN_EXAMPLE
c c: commit
c a: amend
#+END_EXAMPLE

- the amend option only update last commit

** branch

manage branches

#+BEGIN_EXAMPLE
git branch <branch>
git branch -d <branch>: if merged
git branch -D <branch>: if not merged
#+END_EXAMPLE

#+BEGIN_EXAMPLE
b c: create and checkout
b k: delete branch
#+END_EXAMPLE

** checkout

updates files in the working tree to match the version in the snapshot

#+BEGIN_EXAMPLE
git checkout <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
b b:
#+END_EXAMPLE

** merge

merge the current branch with another

#+BEGIN_EXAMPLE
git merge <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
m m:
#+END_EXAMPLE

- 3-way merge :: resolve two branch last commit (commit, used for long running features)
                 - no conflicts:
                 - conflicts: solve conflicts row by row
- fast forward :: update current branch to the newest (no commit, used for small features and bug fixes)
                  - =--no-ff=: resolve fast forward as a 3-way merge

* syncing

** remote

manage remote urls

#+BEGIN_EXAMPLE
git remote add <name> <url>
git remote rm <url>
git remote rename <old> <new>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-remote-...
#+END_EXAMPLE

** clone

#+BEGIN_EXAMPLE
git clone <url>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-clone
#+END_EXAMPLE

** push

#+BEGIN_EXAMPLE
git push [<remote> <branch>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
P p:
#+END_EXAMPLE

To prevent you from overwriting commits, git wonâ€™t let you push when it results in a non-fast-forward merge in the destination repository.
If the remote history has diverged from your history, you need to pull the remote branch and merge it into your local one, then try pushing again.
- =--force-with-lease= ensure none of your teammates have committed (use only for feature-branches).

** fetch

#+BEGIN_EXAMPLE
git fetch [<remote> <branch>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
f p:
#+END_EXAMPLE

- pull :: fetch + merge

* intermediate

** stash

#+BEGIN_EXAMPLE
git stash: only tracked
git stash -u: also untracked
git stash -a: also untracked and ignored

git stash pop
git stash apply
#+END_EXAMPLE

#+BEGIN_EXAMPLE
z z: save
z p: pop
z a: apply
#+END_EXAMPLE

** rebase

apply commits of current branch to the head of another

#+BEGIN_EXAMPLE
git rebase <branch>
git rebase -i <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
r e:
r i:
#+END_EXAMPLE

interactively permit to manage history of commit: squashing, fixuping, deleting, ordering..
- =--autostash= in order: stash, rebase, and stash pop uncommitted changes

** tag

naming convention =v0.0.1=

#+BEGIN_EXAMPLE
git tag <tag>
git push origin --tags

git tag -d <tag>
git push origin :<tag>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
t t:
P t:

t k:
t p:
#+END_EXAMPLE

* undoing

** revert

revert a single commit

#+BEGIN_EXAMPLE
git revert <commit>..
git revert -n <commit>: add the inverse changes to the current working director and index
#+END_EXAMPLE

#+BEGIN_EXAMPLE
V V:
v:
#+END_EXAMPLE

** reset

reset the history

#+BEGIN_EXAMPLE
git reset ..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
X ..
#+END_EXAMPLE

- soft :: HEAD
- mixed :: HEAD, index (default)
- hard :: HEAD, index, working tree

- =HEAD^n= specify which parent follow.
- =HEAD~n= specify for how many. 
(characters can be combined, e.g. =HEAD^2~3=)

* logging

*** reflog

#+BEGIN_EXAMPLE
git reflog
#+END_EXAMPLE

#+BEGIN_EXAMPLE
l H:
#+END_EXAMPLE

- =git checkout HEAD@{n}= to recall a state

* chunks

chunks can be managed from =magit-status=

#+BEGIN_EXAMPLE
C-SPC: (arrows to expand region)

s: stage
u: unstage

k: discard
v: revert
#+END_EXAMPLE
 
