#+BEGIN_QUOTE
first example is for *git* (command-line), second is for *magit*
#+END_QUOTE

* intro

- git :: DVCS (Distributed Version Control System)

advantages of a VCS:
- collaboration
- storing/restoring versions
- understanding changes
- backup

* basics

** init

- create =.git/=
- create HEAD file referencing master (no commit)

#+BEGIN_EXAMPLE
git init [<dir>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-init
#+END_EXAMPLE

** status

displays paths that:
- untracked ::  not in index file (not ignored by .gitignore)
- unstaged :: working tree state different from index virtual working tree state
- staged :: index virtual working tree state different from HEAD referenced branch snapshot

#+BEGIN_EXAMPLE
git status
#+END_EXAMPLE

#+BEGIN_EXAMPLE
C-x g
#+END_EXAMPLE

** stage

update index to set paths to staged

#+BEGIN_EXAMPLE
git add <path>..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
s: single
S: all
#+END_EXAMPLE

** unstage

update index to set paths to untracked/unstaged

#+BEGIN_EXAMPLE
git reset HEAD <path>..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
u: single
U: all
#+END_EXAMPLE

** commit

snapshot of the index changes and HEAD branch update

#+BEGIN_EXAMPLE
git commit
git commit --amend
#+END_EXAMPLE

#+BEGIN_EXAMPLE
c c: commit
c a: amend
#+END_EXAMPLE

- the amend option only update last commit

** branch

manage branches

#+BEGIN_EXAMPLE
git branch <branch>
git branch -d <branch>: if merged
git branch -D <branch>: if not merged
#+END_EXAMPLE

#+BEGIN_EXAMPLE
b c: create and checkout
b k: delete branch
#+END_EXAMPLE

** checkout

updates files in the working tree to match the version in the snapshot

#+BEGIN_EXAMPLE
git checkout <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
b b:
#+END_EXAMPLE

** merge

merge the current branch with another

#+BEGIN_EXAMPLE
git merge <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
m m:
#+END_EXAMPLE

- fast forward :: update current branch to the newest, no commit
- 3-way merge :: resolve two branch last commits in a new commit in which conflicts are solved row by row

* syncing

** remote

manage remote urls

#+BEGIN_EXAMPLE
git remote add <name> <url>
git remote rm <url>
git remote rename <old> <new>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-remote-...
#+END_EXAMPLE

** clone

#+BEGIN_EXAMPLE
git clone <url>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
magit-clone
#+END_EXAMPLE

** push

#+BEGIN_EXAMPLE
git push [<remote> <branch>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
P p:
#+END_EXAMPLE

to prevent you from overwriting commits, git wonâ€™t let you push when it results in a non fast-forward merge in the destination repository.
- =--force-with-lease= force push ensuring none of your teammates have committe

/if the remote history has diverged from your history, you need to fetch the remote branch and merge it into your local one, then try pushing again./

** fetch

#+BEGIN_EXAMPLE
git fetch [<remote> <branch>]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
f p:
#+END_EXAMPLE

- pull :: fetch + merge

* intermediate

** stash

#+BEGIN_EXAMPLE
git stash: only tracked
git stash -u: also untracked
git stash -a: also untracked and ignored

git stash pop
git stash apply
#+END_EXAMPLE

#+BEGIN_EXAMPLE
z z: save
z p: pop
z a: apply
#+END_EXAMPLE

** rebase

apply commits of current branch to the head of another

#+BEGIN_EXAMPLE
git rebase <branch>
git rebase -i <branch>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
r e:
r i:
#+END_EXAMPLE

interactively permit to manage history of commit: squashing, fixuping, deleting, ordering..
- =--autostash= in order: stash, rebase, and stash pop uncommitted changes

** tag

naming convention =v0.0.1=

#+BEGIN_EXAMPLE
git tag <tag>
git push origin --tags

git tag -d <tag>
git push origin :<tag>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
t t:
P t:

t k:
t p:
#+END_EXAMPLE

* undoing

** revert

apply reverse changes

#+BEGIN_EXAMPLE
git revert <commit>..
git revert -n <commit>: no commit (change only working directory and index)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
V V:
v:
#+END_EXAMPLE

** reset

reset the history

#+BEGIN_EXAMPLE
git reset ..
#+END_EXAMPLE

#+BEGIN_EXAMPLE
X ..
#+END_EXAMPLE

- soft :: HEAD
- mixed :: HEAD, index (default)
- hard :: HEAD, index, working tree

- =HEAD^n= specify which parent follow
- =HEAD~n= specify for how many
(characters can be combined: =HEAD^x~y=)

* logging

log the working file =magit-log-buffer-file=

** reflog

#+BEGIN_EXAMPLE
git reflog
#+END_EXAMPLE

#+BEGIN_EXAMPLE
l H:
#+END_EXAMPLE

- checkout =HEAD@{n}= to recall a state

* chunks

chunks can be managed from =magit-status=

#+BEGIN_EXAMPLE
s: stage
u: unstage

k: discard
v: revert
#+END_EXAMPLE
 
